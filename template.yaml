Parameters: 
  Region: 
    Type: String
    Default: us-west-2
    AllowedValues: 
      - us-west-2
    Description: Enter the AWS region to deploy stack. Default is us-west-2
  VPCCidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.0.0/16
    Description: Enter the CIDR for your VPC, Default 10.0.0.0/16
  PublicSubnet1Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.1.0/24
    Description: Enter the CIDR for your Public Subnet 1, Default 10.0.1.0/24
  PublicSubnet2Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.2.0/24
    Description: Enter the CIDR for your Public Subnet 2, Default 10.0.2.0/24
  PrivateSubnet1Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.3.0/24
    Description: Enter the CIDR for your Private Subnet 1, Default 10.0.3.0/24
  PrivateSubnet2Cidr:
    AllowedPattern: '((\d{1,3})\.){3}\d{1,3}/\d{1,2}'
    Type: String
    Default: 10.0.4.0/24
    Description: Enter the CIDR for your Private Subnet 2, Default 10.0.4.0/24
  KeyPair:
    Type: String
    Default: MyKeyPair
    Description: Select a pre-generated KeyPair. You need to create one first if you haven't.

Mappings: 
  RegionMap: 
    us-west-2:
      HVM64: ami-0b59bfac6be064b78

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: !Ref VPCCidr
      Tags:
        - Key: Name
          Value: MyVPC 

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}a
      CidrBlock: !Ref PublicSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: PublicSubnet-1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}b
      CidrBlock: !Ref PublicSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: PublicSubnet-2

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}a
      CidrBlock: !Ref PrivateSubnet1Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: PrivateSubnet-1

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Sub ${Region}b
      CidrBlock: !Ref PrivateSubnet2Cidr
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: PrivateSubnet-2

  IG:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        -  Key: Name 
           Value: IntGateway

  AttachIGtoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref IG
      VpcId: !Ref VPC

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public-RouteTable

  PrivateRT:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: Private-RouteTable

  AssociatePublicSubnet1ToPublicRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet1

  AssociatePublicSubnet2ToPublicRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicSubnet2

  AssociatePrivateSubnet1ToPrivateRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet1

  AssociatePrivateSubnet2ToPrivateRT:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref PrivateRT
      SubnetId: !Ref PrivateSubnet2

  PublicRouteToInternet:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IG
      RouteTableId: !Ref PublicRT

  PrivateRouteToInternet:
    Type: AWS::EC2::Route
    Properties: 
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGW
      RouteTableId: !Ref PrivateRT

  # Create Elastic IP which will be used by the NAT Gateway
  NATEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: !Ref VPC

  NATGW:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NATEIP.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name 
          Value: NAT-GW

  BastionSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group for Bastion Host to allow SSH
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name 
          Value: Bastion-SG
      VpcId: !Ref VPC

  ALBSG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group for Application Load Balancer to expose HTTP 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name 
          Value: ALB-SG
      VpcId: !Ref VPC

  EC2SG:
    Type: AWS::EC2::SecurityGroup
    Properties: 
      GroupDescription: Security Group for EC2 to allow SSH from Bastion and expose HTTP 80
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref BastionSG
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSG
      Tags:
        - Key: Name 
          Value: EC2-SG
      VpcId: !Ref VPC

  BastionHost:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !Sub ${Region}a
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "8"
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - HVM64
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          SubnetId: !Ref PublicSubnet1
          GroupSet: 
            - !Ref BastionSG
      Tags: 
        - Key: Name 
          Value: Bastion Host

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: ALB
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSG
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Type: application

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTG
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP

  ALBTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: '200'
      Name: AppTargets
      Port: 80
      Protocol: HTTP
      Targets:
      - Id: !Ref EC2App1
        Port: 80
      - Id: !Ref EC2App2
        Port: 80
      VpcId: !Ref VPC
      Tags:
        - Key: Name 
          Value: ALB-TargetGroup

  EC2App1:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !Sub ${Region}a
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "8"
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - HVM64
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              aws ec2 wait nat-gateway-available --nat-gateway-ids {gateway}
              sudo yum update -y
              sudo yum install httpd -y
              sudo service httpd start
              sudo chkconfig httpd on
              cd var/www/html
              echo "<html><h1>hello test</h1></html>" > index.html
            - {
              gateway: !Ref NATGW
              }
      InstanceType: t2.micro
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          SubnetId: !Ref PrivateSubnet1
          GroupSet: 
            - !Ref EC2SG
      Tags: 
        - Key: Name 
          Value: EC2-1

  EC2App2:
    Type: AWS::EC2::Instance
    Properties: 
      AvailabilityZone: !Sub ${Region}b
      BlockDeviceMappings: 
        - DeviceName: "/dev/xvda"
          Ebs: 
            VolumeType: "gp2"
            DeleteOnTermination: "true"
            VolumeSize: "8"
      ImageId: !FindInMap
        - RegionMap
        - !Ref 'AWS::Region'
        - HVM64
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              aws ec2 wait nat-gateway-available --nat-gateway-ids {gateway}
              sudo yum update -y
              sudo yum install -y httpd
              sudo service httpd start
              sudo chkconfig httpd on
            - {
              gateway: !Ref NATGW
              }
      InstanceType: t3.micro
      KeyName: !Ref KeyPair
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "false"
          DeviceIndex: "0"
          SubnetId: !Ref PrivateSubnet2
          GroupSet: 
            - !Ref EC2SG
      Tags: 
        - Key: Name 
          Value: EC2-2
